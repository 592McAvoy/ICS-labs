#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# ID: 516030910101
# Name: Luo Yuchen
#
# Describe how and why you modified the baseline code.
# 1.Change the order of some instructions to avoid Load-Use hazard
# 2.Use iaddq to replace some combinations of irmovq and OPq, so as to reduce the amount of instructions
# 3.Use loop unrolling to reduce the amount of iterations
# 4.Change some jump condition to reduce mispredicted jumps
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
        
	//xorq %rax,%rax		# count = 0
	iaddq $-10,%rdx		# len >= 10?
	jg Loop	
	jmp final
Loop:	
	mrmovq (%rdi), %r8	# read val1 from src1
	mrmovq 8(%rdi), %r9 # read val2 from src2
	mrmovq 16(%rdi), %r10	# read val3 from src3
	mrmovq 24(%rdi), %r11 # read val4 from src4
	mrmovq 32(%rdi), %r12	# read val5 from src5
	mrmovq 40(%rdi), %r13 # read val6 from src6
	mrmovq 48(%rdi), %r14	# read val7 from src7
	mrmovq 56(%rdi), %rbx # read val8 from src8

	rmmovq %r8, (%rsi)	# and store val1 to dst1
	rmmovq %r9, 8(%rsi) # store val2 to dst2	
	rmmovq %r10, 16(%rsi)	# and store val1 to dst1
	rmmovq %r11, 24(%rsi) # store val2 to dst2
	rmmovq %r12, 32(%rsi)	# and store val1 to dst1
	rmmovq %r13, 40(%rsi) # store val2 to dst2	
	rmmovq %r14, 48(%rsi)	# and store val1 to dst1
	rmmovq %rbx, 56(%rsi) # store val2 to dst2
test1:
	andq %r8, %r8		# val1 <= 0?	
	jle test2		# if so, goto test2
	iaddq $1, %rax			# count++
test2:
	andq %r9, %r9		# val1 <= 0?	
	jle test3		# if so, goto test2
	iaddq $1, %rax			# count++
test3:
	andq %r10, %r10		# val1 <= 0?	
	jle test4		# if so, goto test2
	iaddq $1, %rax			# count++
test4:
	andq %r11, %r11		# val1 <= 0?	
	jle test5		# if so, goto test2
	iaddq $1, %rax			# count++
test5:
	andq %r12, %r12		# val1 <= 0?	
	jle test6		# if so, goto test2
	iaddq $1, %rax			# count++
test6:
	andq %r13, %r13		# val1 <= 0?	
	jle test7		# if so, goto test2
	iaddq $1, %rax			# count++
test7:
	andq %r14, %r14		# val1 <= 0?	
	jle test8		# if so, goto test2
	iaddq $1, %rax			# count++
test8:
	andq %rbx, %rbx		# val1 <= 0?	
	jle round2
	iaddq $1, %rax
round2:	
	mrmovq 64(%rdi), %r8	# read val1 from src1
	mrmovq 72(%rdi), %r9
	
	rmmovq %r8, 64(%rsi)	# and store val1 to dst1
	rmmovq %r9, 72(%rsi) 	
rtest1:
	andq %r8, %r8		# val1 <= 0?	
	jle rtest2		# if so, goto test2
	iaddq $1, %rax			# count++
rtest2:
	andq %r9, %r9		# val1 <= 0?	
	jle Npos		# if so, goto test2
	iaddq $1, %rax			# count++

Npos:	
	iaddq $80, %rdi			# src += 2
	iaddq $80, %rsi			# dst += 2
	
	iaddq $-10, %rdx			# len -= 8
	jg Loop			# if so, goto Loop:
final:
	iaddq $9, %rdx
	jg finalLoop
	je finalDeal
	ret
finalLoop:	
	mrmovq (%rdi), %r10	# read val1 from src1
	mrmovq 8(%rdi), %r11 # read val2 from src2
	
	rmmovq %r10, (%rsi)	# and store val1 to dst1
	rmmovq %r11, 8(%rsi) # store val2 to dst2
ftest1:
	andq %r10, %r10		# val1 <= 0?	
	jle ftest2		# if so, goto test2
	iaddq $1, %rax			# count++
ftest2:
	andq %r11, %r11
	jle fNpos
	iaddq $1, %rax
fNpos:	
	iaddq $16, %rdi			# src += 2
	iaddq $16, %rsi			# dst += 2
	
	iaddq $-2, %rdx			# len -= 2
	jg finalLoop			# if so, goto Loop:
	jne Done
finalDeal:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst

	andq %r10, %r10		# val <= 0?	
	jle Done		# if so, goto Npos:
Add:
	iaddq $1,%rax			# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.

Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
